{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to bqslots \u00b6 A small wrapper for bigquery slot allocaiton Free software: MIT license Documentation: https://connor-ps.github.io/bqslots Features \u00b6 TODO Credits \u00b6 This package was created with Cookiecutter and the giswqs/pypackage project template.","title":"Home"},{"location":"#welcome-to-bqslots","text":"A small wrapper for bigquery slot allocaiton Free software: MIT license Documentation: https://connor-ps.github.io/bqslots","title":"Welcome to bqslots"},{"location":"#features","text":"TODO","title":"Features"},{"location":"#credits","text":"This package was created with Cookiecutter and the giswqs/pypackage project template.","title":"Credits"},{"location":"bqslots/","text":"bqslots module \u00b6 wrapper for reservation client, each client is for one project and reservation type Examples: Source code in bqslots/slots_allocation.py class Client : \"\"\" wrapper for reservation client, each client is for one project and reservation type example: \"\"\" MAX_SLOTS_MESSAGE = \"SLOTS_QUOTA_REACHED\" standard_retry = retry . Retry ( deadline = 120 , predicate = Exception ) def __init__ ( self , admin_project : str , admin_region : str , reservation : str , max_slots_quota : int , user_project : str , gcs_lock_bucket = None , lock_client_prefix = \"bqs-slots\" , ): self . admin_project = admin_project self . admin_region = admin_region self . reservation = ( reservation . lower () ) # i.e \"default\" needs to be lowercase api calls self . max_slots_quota = max_slots_quota self . user_project = user_project self . admin_project_region_path = ( f \"projects/ { admin_project } /locations/ { admin_region } \" ) self . reservation_path = ( f \" { self . admin_project_region_path } /reservations/ { reservation } \" ) self . reservation_api = bigquery_reservation_v1 . ReservationServiceClient () self . last_slot_commit = None self . using_lock = False if gcs_lock_bucket : self . lock_client = lock . Client ( bucket = gcs_lock_bucket , lock_file_path = \"slots-lock.txt\" , expiry = 30 , lock_id_prefix = lock_client_prefix , ) self . using_lock = True def allocate_slots ( self , slots : int ) -> str : \"\"\" allocate slots :param slots: :return: commitment_id str \"\"\" commit = self . _purchase_commitment ( slots ) return commit def increment_reservation ( self , slots : int ): \"\"\" :param slots: :return: \"\"\" # do stuff if self . using_lock : self . lock_client . wait_for_lock_expo () self . _increment_slots_number_on_reservation ( slots ) if not self . _reservation_assigned_to_project (): self . _create_assignment () if self . using_lock : self . lock_client . free_lock () def clear_slots_commitment ( self , commitment_id : str ): \"\"\" :param commitment_id: :return: \"\"\" if commitment_id == self . MAX_SLOTS_MESSAGE : print ( self . MAX_SLOTS_MESSAGE ) return # do stuff if self . using_lock : self . lock_client . wait_for_lock_expo () commit = self . reservation_api . get_capacity_commitment ( name = commitment_id , retry = self . standard_retry , ) commit_slots = commit . slot_count self . _decrement_slots_number_on_reservation ( commit_slots ) reservation_amount = self . _get_number_of_slots_allocated_reservation () if reservation_amount == 0 : self . _clear_assignments_for_reservation () self . _clear_slots ( commitment_id ) total_slots_used = self . _get_total_number_of_slots_allocated_admin_project () if self . using_lock : self . lock_client . free_lock () msg = f \"\"\" commitment: { commitment_id } -> DELETED reservation_amount left: { reservation_amount } total_slots_used on admin project: { total_slots_used } \"\"\" box_print ( msg = msg , indent = 20 ) @staticmethod def write_dict_to_json_file ( path : str , filename : str , data : Dict ): \"\"\" :param path: :param filename: :param data: :return: \"\"\" p = Path ( path ) p . mkdir ( exist_ok = True , parents = True ) ( p / filename ) . open ( \"w\" ) . write ( json . dumps ( data )) def _decrement_slots_number_on_reservation ( self , slots : int ): \"\"\" :param slots: :return: \"\"\" slots_num = - abs ( slots ) self . _change_reservation_slots_amount ( slots_num ) def _increment_slots_number_on_reservation ( self , slots : int ): \"\"\" :param slots: :return: \"\"\" self . _change_reservation_slots_amount ( abs ( slots )) def _purchase_commitment ( self , slots ) -> str : \"\"\" Create a commitment for a specific amount of slots (in increments of 500). :param slots: Number of slots to purchase :return: the commit name \"\"\" if ( slots + self . _get_total_number_of_slots_allocated_admin_project () > self . max_slots_quota ): return self . MAX_SLOTS_MESSAGE commit_config = bigquery_reservation_v1 . CapacityCommitment ( plan = \"FLEX\" , slot_count = slots , ) commit = self . reservation_api . create_capacity_commitment ( parent = self . admin_project_region_path , capacity_commitment = commit_config , retry = self . standard_retry , ) self . last_slot_commit = commit . name box_print ( f \"purchased commit: { commit . name } \" ) return commit . name def _get_total_number_of_slots_allocated_admin_project ( self ) -> int : \"\"\" :return: \"\"\" list_slot_counts = [ i . slot_count for i in self . reservation_api . list_capacity_commitments ( parent = self . admin_project_region_path , retry = self . standard_retry ) ] return sum ( list_slot_counts ) def _get_number_of_slots_allocated_reservation ( self ): \"\"\" :return: \"\"\" res = self . reservation_api . get_reservation ( name = self . reservation_path , retry = self . standard_retry , ) return res . slot_capacity def _create_assignment ( self ): \"\"\" Create an assignment of either an organization, folders or projects to a specific reservation. :param reservation_id: The reservation id from which the project id will be assigned :param user_project: The project id that will use be assigned to this reservation :return: the assignment name \"\"\" assign_config = bigquery_reservation_v1 . Assignment ( job_type = \"QUERY\" , assignee = f \"projects/ { self . user_project } \" ) try : assign = self . reservation_api . create_assignment ( parent = self . reservation_path , assignment = assign_config , retry = self . standard_retry , ) return assign . name except Exception as e : print ( e ) def _change_reservation_slots_amount ( self , amount = 100 ): \"\"\" :param amount: :return: \"\"\" res = self . reservation_api . get_reservation ( name = self . reservation_path , retry = self . standard_retry ) desired_slots_amount = res . slot_capacity + amount if desired_slots_amount <= 0 : # can not set to negative desired_slots_amount = 0 res . slot_capacity = desired_slots_amount update_mask = field_mask_pb2 . FieldMask ( paths = [ \"slot_capacity\" ]) final_res = self . reservation_api . update_reservation ( reservation = res , update_mask = update_mask , retry = self . standard_retry , ) assert final_res . slot_capacity == desired_slots_amount , \"slots not allocated\" def _reservation_assigned_to_project ( self ): \"\"\" :return: \"\"\" for assignment in self . _list_assignments (): if self . reservation_path in assignment : return True return False def _list_assignments ( self ) -> List : \"\"\" :return: \"\"\" list_reservations = [ i . name for i in self . reservation_api . list_reservations ( parent = self . admin_project_region_path , retry = self . standard_retry ) ] assignments = [] for i in list ( map ( lambda x : x . split ( \"/\" )[ - 1 ], list_reservations )): assignments . extend ( [ i . name for i in self . reservation_api . list_assignments ( parent = self . admin_project_region_path + \"/reservations/\" + i ) ] ) return assignments def _clear_assignments_for_reservation ( self ): \"\"\" :return: \"\"\" # ``projects/myproject/locations/US/reservations/team1-prod/assignments/123`` assignment = self . _get_assignment_for_reservation () self . reservation_api . delete_assignment ( name = assignment , retry = self . standard_retry , ) def _get_assignment_for_reservation ( self ): \"\"\" :return: \"\"\" # there should only be one assignment per reservation list_assignments = self . reservation_api . list_assignments ( parent = self . reservation_path , retry = self . standard_retry ) # we get a list of assigment ids like # ``projects/myproject/locations/US/reservations/team1-prod/assignments/123`` assignment = [ assignment . name for assignment in list_assignments ][ 0 ] return assignment def _clear_slots ( self , commit_id : str ): \"\"\" :param commit_id: :return: \"\"\" self . reservation_api . delete_capacity_commitment ( name = commit_id , retry = self . standard_retry ) allocate_slots ( self , slots ) \u00b6 allocate slots :param slots: :return: commitment_id str Source code in bqslots/slots_allocation.py def allocate_slots ( self , slots : int ) -> str : \"\"\" allocate slots :param slots: :return: commitment_id str \"\"\" commit = self . _purchase_commitment ( slots ) return commit clear_slots_commitment ( self , commitment_id ) \u00b6 :param commitment_id: :return: Source code in bqslots/slots_allocation.py def clear_slots_commitment ( self , commitment_id : str ): \"\"\" :param commitment_id: :return: \"\"\" if commitment_id == self . MAX_SLOTS_MESSAGE : print ( self . MAX_SLOTS_MESSAGE ) return # do stuff if self . using_lock : self . lock_client . wait_for_lock_expo () commit = self . reservation_api . get_capacity_commitment ( name = commitment_id , retry = self . standard_retry , ) commit_slots = commit . slot_count self . _decrement_slots_number_on_reservation ( commit_slots ) reservation_amount = self . _get_number_of_slots_allocated_reservation () if reservation_amount == 0 : self . _clear_assignments_for_reservation () self . _clear_slots ( commitment_id ) total_slots_used = self . _get_total_number_of_slots_allocated_admin_project () if self . using_lock : self . lock_client . free_lock () msg = f \"\"\" commitment: { commitment_id } -> DELETED reservation_amount left: { reservation_amount } total_slots_used on admin project: { total_slots_used } \"\"\" box_print ( msg = msg , indent = 20 ) increment_reservation ( self , slots ) \u00b6 :param slots: :return: Source code in bqslots/slots_allocation.py def increment_reservation ( self , slots : int ): \"\"\" :param slots: :return: \"\"\" # do stuff if self . using_lock : self . lock_client . wait_for_lock_expo () self . _increment_slots_number_on_reservation ( slots ) if not self . _reservation_assigned_to_project (): self . _create_assignment () if self . using_lock : self . lock_client . free_lock () write_dict_to_json_file ( path , filename , data ) staticmethod \u00b6 :param path: :param filename: :param data: :return: Source code in bqslots/slots_allocation.py @staticmethod def write_dict_to_json_file ( path : str , filename : str , data : Dict ): \"\"\" :param path: :param filename: :param data: :return: \"\"\" p = Path ( path ) p . mkdir ( exist_ok = True , parents = True ) ( p / filename ) . open ( \"w\" ) . write ( json . dumps ( data ))","title":"bqslots module"},{"location":"bqslots/#bqslots-module","text":"wrapper for reservation client, each client is for one project and reservation type Examples: Source code in bqslots/slots_allocation.py class Client : \"\"\" wrapper for reservation client, each client is for one project and reservation type example: \"\"\" MAX_SLOTS_MESSAGE = \"SLOTS_QUOTA_REACHED\" standard_retry = retry . Retry ( deadline = 120 , predicate = Exception ) def __init__ ( self , admin_project : str , admin_region : str , reservation : str , max_slots_quota : int , user_project : str , gcs_lock_bucket = None , lock_client_prefix = \"bqs-slots\" , ): self . admin_project = admin_project self . admin_region = admin_region self . reservation = ( reservation . lower () ) # i.e \"default\" needs to be lowercase api calls self . max_slots_quota = max_slots_quota self . user_project = user_project self . admin_project_region_path = ( f \"projects/ { admin_project } /locations/ { admin_region } \" ) self . reservation_path = ( f \" { self . admin_project_region_path } /reservations/ { reservation } \" ) self . reservation_api = bigquery_reservation_v1 . ReservationServiceClient () self . last_slot_commit = None self . using_lock = False if gcs_lock_bucket : self . lock_client = lock . Client ( bucket = gcs_lock_bucket , lock_file_path = \"slots-lock.txt\" , expiry = 30 , lock_id_prefix = lock_client_prefix , ) self . using_lock = True def allocate_slots ( self , slots : int ) -> str : \"\"\" allocate slots :param slots: :return: commitment_id str \"\"\" commit = self . _purchase_commitment ( slots ) return commit def increment_reservation ( self , slots : int ): \"\"\" :param slots: :return: \"\"\" # do stuff if self . using_lock : self . lock_client . wait_for_lock_expo () self . _increment_slots_number_on_reservation ( slots ) if not self . _reservation_assigned_to_project (): self . _create_assignment () if self . using_lock : self . lock_client . free_lock () def clear_slots_commitment ( self , commitment_id : str ): \"\"\" :param commitment_id: :return: \"\"\" if commitment_id == self . MAX_SLOTS_MESSAGE : print ( self . MAX_SLOTS_MESSAGE ) return # do stuff if self . using_lock : self . lock_client . wait_for_lock_expo () commit = self . reservation_api . get_capacity_commitment ( name = commitment_id , retry = self . standard_retry , ) commit_slots = commit . slot_count self . _decrement_slots_number_on_reservation ( commit_slots ) reservation_amount = self . _get_number_of_slots_allocated_reservation () if reservation_amount == 0 : self . _clear_assignments_for_reservation () self . _clear_slots ( commitment_id ) total_slots_used = self . _get_total_number_of_slots_allocated_admin_project () if self . using_lock : self . lock_client . free_lock () msg = f \"\"\" commitment: { commitment_id } -> DELETED reservation_amount left: { reservation_amount } total_slots_used on admin project: { total_slots_used } \"\"\" box_print ( msg = msg , indent = 20 ) @staticmethod def write_dict_to_json_file ( path : str , filename : str , data : Dict ): \"\"\" :param path: :param filename: :param data: :return: \"\"\" p = Path ( path ) p . mkdir ( exist_ok = True , parents = True ) ( p / filename ) . open ( \"w\" ) . write ( json . dumps ( data )) def _decrement_slots_number_on_reservation ( self , slots : int ): \"\"\" :param slots: :return: \"\"\" slots_num = - abs ( slots ) self . _change_reservation_slots_amount ( slots_num ) def _increment_slots_number_on_reservation ( self , slots : int ): \"\"\" :param slots: :return: \"\"\" self . _change_reservation_slots_amount ( abs ( slots )) def _purchase_commitment ( self , slots ) -> str : \"\"\" Create a commitment for a specific amount of slots (in increments of 500). :param slots: Number of slots to purchase :return: the commit name \"\"\" if ( slots + self . _get_total_number_of_slots_allocated_admin_project () > self . max_slots_quota ): return self . MAX_SLOTS_MESSAGE commit_config = bigquery_reservation_v1 . CapacityCommitment ( plan = \"FLEX\" , slot_count = slots , ) commit = self . reservation_api . create_capacity_commitment ( parent = self . admin_project_region_path , capacity_commitment = commit_config , retry = self . standard_retry , ) self . last_slot_commit = commit . name box_print ( f \"purchased commit: { commit . name } \" ) return commit . name def _get_total_number_of_slots_allocated_admin_project ( self ) -> int : \"\"\" :return: \"\"\" list_slot_counts = [ i . slot_count for i in self . reservation_api . list_capacity_commitments ( parent = self . admin_project_region_path , retry = self . standard_retry ) ] return sum ( list_slot_counts ) def _get_number_of_slots_allocated_reservation ( self ): \"\"\" :return: \"\"\" res = self . reservation_api . get_reservation ( name = self . reservation_path , retry = self . standard_retry , ) return res . slot_capacity def _create_assignment ( self ): \"\"\" Create an assignment of either an organization, folders or projects to a specific reservation. :param reservation_id: The reservation id from which the project id will be assigned :param user_project: The project id that will use be assigned to this reservation :return: the assignment name \"\"\" assign_config = bigquery_reservation_v1 . Assignment ( job_type = \"QUERY\" , assignee = f \"projects/ { self . user_project } \" ) try : assign = self . reservation_api . create_assignment ( parent = self . reservation_path , assignment = assign_config , retry = self . standard_retry , ) return assign . name except Exception as e : print ( e ) def _change_reservation_slots_amount ( self , amount = 100 ): \"\"\" :param amount: :return: \"\"\" res = self . reservation_api . get_reservation ( name = self . reservation_path , retry = self . standard_retry ) desired_slots_amount = res . slot_capacity + amount if desired_slots_amount <= 0 : # can not set to negative desired_slots_amount = 0 res . slot_capacity = desired_slots_amount update_mask = field_mask_pb2 . FieldMask ( paths = [ \"slot_capacity\" ]) final_res = self . reservation_api . update_reservation ( reservation = res , update_mask = update_mask , retry = self . standard_retry , ) assert final_res . slot_capacity == desired_slots_amount , \"slots not allocated\" def _reservation_assigned_to_project ( self ): \"\"\" :return: \"\"\" for assignment in self . _list_assignments (): if self . reservation_path in assignment : return True return False def _list_assignments ( self ) -> List : \"\"\" :return: \"\"\" list_reservations = [ i . name for i in self . reservation_api . list_reservations ( parent = self . admin_project_region_path , retry = self . standard_retry ) ] assignments = [] for i in list ( map ( lambda x : x . split ( \"/\" )[ - 1 ], list_reservations )): assignments . extend ( [ i . name for i in self . reservation_api . list_assignments ( parent = self . admin_project_region_path + \"/reservations/\" + i ) ] ) return assignments def _clear_assignments_for_reservation ( self ): \"\"\" :return: \"\"\" # ``projects/myproject/locations/US/reservations/team1-prod/assignments/123`` assignment = self . _get_assignment_for_reservation () self . reservation_api . delete_assignment ( name = assignment , retry = self . standard_retry , ) def _get_assignment_for_reservation ( self ): \"\"\" :return: \"\"\" # there should only be one assignment per reservation list_assignments = self . reservation_api . list_assignments ( parent = self . reservation_path , retry = self . standard_retry ) # we get a list of assigment ids like # ``projects/myproject/locations/US/reservations/team1-prod/assignments/123`` assignment = [ assignment . name for assignment in list_assignments ][ 0 ] return assignment def _clear_slots ( self , commit_id : str ): \"\"\" :param commit_id: :return: \"\"\" self . reservation_api . delete_capacity_commitment ( name = commit_id , retry = self . standard_retry )","title":"bqslots module"},{"location":"bqslots/#bqslots.slots_allocation.Client.allocate_slots","text":"allocate slots :param slots: :return: commitment_id str Source code in bqslots/slots_allocation.py def allocate_slots ( self , slots : int ) -> str : \"\"\" allocate slots :param slots: :return: commitment_id str \"\"\" commit = self . _purchase_commitment ( slots ) return commit","title":"allocate_slots()"},{"location":"bqslots/#bqslots.slots_allocation.Client.clear_slots_commitment","text":":param commitment_id: :return: Source code in bqslots/slots_allocation.py def clear_slots_commitment ( self , commitment_id : str ): \"\"\" :param commitment_id: :return: \"\"\" if commitment_id == self . MAX_SLOTS_MESSAGE : print ( self . MAX_SLOTS_MESSAGE ) return # do stuff if self . using_lock : self . lock_client . wait_for_lock_expo () commit = self . reservation_api . get_capacity_commitment ( name = commitment_id , retry = self . standard_retry , ) commit_slots = commit . slot_count self . _decrement_slots_number_on_reservation ( commit_slots ) reservation_amount = self . _get_number_of_slots_allocated_reservation () if reservation_amount == 0 : self . _clear_assignments_for_reservation () self . _clear_slots ( commitment_id ) total_slots_used = self . _get_total_number_of_slots_allocated_admin_project () if self . using_lock : self . lock_client . free_lock () msg = f \"\"\" commitment: { commitment_id } -> DELETED reservation_amount left: { reservation_amount } total_slots_used on admin project: { total_slots_used } \"\"\" box_print ( msg = msg , indent = 20 )","title":"clear_slots_commitment()"},{"location":"bqslots/#bqslots.slots_allocation.Client.increment_reservation","text":":param slots: :return: Source code in bqslots/slots_allocation.py def increment_reservation ( self , slots : int ): \"\"\" :param slots: :return: \"\"\" # do stuff if self . using_lock : self . lock_client . wait_for_lock_expo () self . _increment_slots_number_on_reservation ( slots ) if not self . _reservation_assigned_to_project (): self . _create_assignment () if self . using_lock : self . lock_client . free_lock ()","title":"increment_reservation()"},{"location":"bqslots/#bqslots.slots_allocation.Client.write_dict_to_json_file","text":":param path: :param filename: :param data: :return: Source code in bqslots/slots_allocation.py @staticmethod def write_dict_to_json_file ( path : str , filename : str , data : Dict ): \"\"\" :param path: :param filename: :param data: :return: \"\"\" p = Path ( path ) p . mkdir ( exist_ok = True , parents = True ) ( p / filename ) . open ( \"w\" ) . write ( json . dumps ( data ))","title":"write_dict_to_json_file()"},{"location":"changelog/","text":"Changelog \u00b6 v0.0.1 - Date \u00b6 Improvement : TBD New Features : TBD","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#v001-date","text":"Improvement : TBD New Features : TBD","title":"v0.0.1 - Date"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/connor-ps/bqslots/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with bug and help wanted is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with enhancement and help wanted is open to whoever wants to implement it. Write Documentation \u00b6 bqslots could always use more documentation, whether as part of the official bqslots docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/connor-ps/bqslots/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up bqslots for local development. Fork the bqslots repo on GitHub. Clone your fork locally: 1 $ git clone git@github.com:your_name_here/bqslots.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: 1 2 3 $ mkvirtualenv bqslots $ cd bqslots/ $ python setup.py develop Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox: 1 2 3 $ flake8 bqslots tests $ python setup.py test or pytest $ tox To get flake8 and tox, just pip install them into your virtualenv. Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and for PyPy. Check https://github.com/connor-ps/bqslots/pull_requests and make sure that the tests pass for all supported Python versions.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/connor-ps/bqslots/issues . If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with bug and help wanted is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with enhancement and help wanted is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"bqslots could always use more documentation, whether as part of the official bqslots docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/connor-ps/bqslots/issues . If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up bqslots for local development. Fork the bqslots repo on GitHub. Clone your fork locally: 1 $ git clone git@github.com:your_name_here/bqslots.git Install your local copy into a virtualenv. Assuming you have virtualenvwrapper installed, this is how you set up your fork for local development: 1 2 3 $ mkvirtualenv bqslots $ cd bqslots/ $ python setup.py develop Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass flake8 and the tests, including testing other Python versions with tox: 1 2 3 $ flake8 bqslots tests $ python setup.py test or pytest $ tox To get flake8 and tox, just pip install them into your virtualenv. Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.rst. The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and for PyPy. Check https://github.com/connor-ps/bqslots/pull_requests and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"faq/","text":"FAQ \u00b6","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install bqslots, run this command in your terminal: 1 pip install bqslots This is the preferred method to install bqslots, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From sources \u00b6 The sources for bqslots can be downloaded from the Github repo. You can clone the public repository: 1 git clone git://github.com/connor-ps/bqslots","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install bqslots, run this command in your terminal: 1 pip install bqslots This is the preferred method to install bqslots, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-sources","text":"The sources for bqslots can be downloaded from the Github repo. You can clone the public repository: 1 git clone git://github.com/connor-ps/bqslots","title":"From sources"},{"location":"usage/","text":"Usage \u00b6 To use bqslots in a project: 1 import bqslots","title":"Usage"},{"location":"usage/#usage","text":"To use bqslots in a project: 1 import bqslots","title":"Usage"}]}